swagger: '2.0'
info:
  version: "0.0.1"
  title: Bosh external CPI API
host: localhost:8081
schemes:
  - http
paths:
 /create_stemcell:
  post:
    operationId: create_stemcell
    summary: Create stemcell
    tags:
      - stemcell
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/create_stemcell.go
    externalDocs:
      description: light stemcell
      url: https://bosh.io/docs/stemcell.html
    description: |
     Creates a reusable VM image in the IaaS from the stemcell image. It's used later for creating VMs. For example AWS CPI creates an AMI and returns AMI ID.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: image_path
        in: query
        description: |
         path to the stemcell image on a local FS extracted from the stemcell tarball
        required: true
        type: string
      - name: cloud_properties
        in: body
        description: |
         cloud properties hash extracted from the stemcell tarball
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/PropertyItem'
    responses:
      default:
       description: Stemcell CID
       schema:
        $ref: '#/definitions/StemcellID'

 /delete_stemcell:
  delete:
    operationId: delete_stemcell
    summary: Delete stemcell
    tags:
      - stemcell
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/delete_stemcell.go
    description: |
      Deletes previously created stemcell. Assume that none of the VMs require presence of the stemcell.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: stemcell_id
        in: query
        description: |
         cloud ID of the stemcell to delete; returned from create_stemcell
        required: true
        type: string
    responses:
      default:
        description: No return value
        schema:
          $ref: '#/definitions/Empty'

 /create_vm:
  post:
    operationId: create_vm
    summary: Create VM
    tags:
      - vm
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/create_vm.go
    description: |
      Creates a new VM based on the stemcell. Created VM must be accessible on the provided networks. Make sure to properly delete created resources if VM cannot be successfully created. Agent communication For the BOSH Agent to successfully start on the created VM, several communication settings must be exposed which include network configuration, message bus location, agent id, etc. Each infrastructure might have a different way of exposing such settings. For example AWS CPI uses instance user metadata and BOSH Registry. vSphere CPI uses CDROM drive. Most CPIs choose to communicate with default BOSH Agent hence communication settings. 
      follow certain format: BOSH Agent infrastructure settings
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: agent_id
        in: query
        description: |
          id selected by the BOSH Director for the VM's agent
        required: true
        type: string
      - name: stemcell_cid
        in: query
        description: |
          cloud ID of the stemcell to use as a base image for new VM
        required: true
        type: string
      - name: create_vm
        in: body
        required: true
        schema:
            $ref: '#/definitions/CreateVM'
    responses:
      default:
       description: VM CID
       schema:
        $ref: '#/definitions/VMID'

 /delete_vm:
  delete:
    operationId: delete_vm
    summary: Delete VM.
    tags:
      - vm
    description: |
     Deletes the VM. Assume that all disks were detached. To avoid losing track of VMs, make sure to raise an error if VM deletion is not absolutely certain.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty'

 /has_vm:
  get:
    operationId: has_vm
    summary: Has VM.
    tags:
      - vm
    description: |
     Checks for VM presence.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
    responses:
     default:
      description: returns true if VM exists
      schema:
       $ref: '#/definitions/Exists'

 /set_vm_metadata:
  put:
    operationId: set_vm_metadata
    summary: Set VM Metadata.
    tags:
      - vm
    description: |
     Sets VM's metadata.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
      - name: metadata
        in: body
        description: |
         metadata hash
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/PropertyItem'
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty'

 /create_vm:
  post:
    operationId: create_vm
    summary: Create VM
    tags:
      - vm
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/create_vm.go
    description: |
      Creates a new VM based on the stemcell. Created VM must be accessible on the provided networks. Make sure to properly delete created resources if VM cannot be successfully created. Agent communication For the BOSH Agent to successfully start on the created VM, several communication settings must be exposed which include network configuration, message bus location, agent id, etc. Each infrastructure might have a different way of exposing such settings. For example AWS CPI uses instance user metadata and BOSH Registry. vSphere CPI uses CDROM drive. Most CPIs choose to communicate with default BOSH Agent hence communication settings. 
      follow certain format: BOSH Agent infrastructure settings
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: agent_id
        in: query
        description: |
          id selected by the BOSH Director for the VM's agent
        required: true
        type: string
      - name: stemcell_cid
        in: query
        description: |
          cloud ID of the stemcell to use as a base image for new VM
        required: true
        type: string
      - name: create_vm
        in: body
        required: true
        schema:
            $ref: '#/definitions/CreateVM'
    responses:
      default:
       description: VM CID
       schema:
        $ref: '#/definitions/VMID'

 /configure_network:
  put:
    operationId: configure_network
    summary: Configure Network
    tags:
      - network
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/configure_network.go
    description: |
      Modifies VM network configuration. Assume that VM can be either on or off. Some infrastructures do not support network reconfiguration while VM is powered on. It's safe to power off the VM, then reconfigure networks and power it back on. Waiting for the VM to finish powering on is not required because BOSH Director waits until VM's agent returns a ping via NATS. For infrastructures that do support network reconfiguration or when VM cannot be reconfigured to a new state from its current state, Bosh::Clouds::NotSupported error should be raised. BOSH Director will delete the VM (via delete_vm) and create a new VM with desired network configuration (via create_vm).
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
      - name: networks
        in: body
        description: |
         array of network hashes that specify networks VM must be configured
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/Network'
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty'

 /create_disk:
  post:
    operationId: create_disk
    summary: Create Disk
    tags:
      - disk
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/create_disk.go  
    description: |
      Creates disk with specific size. Disk does not belong to any given VM.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: size
        in: query
        description: |
         size of the disk in MiB
        required: true
        type: integer
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
    responses:
      default:
       description: cloud ID of the created disk
       schema:
        $ref: '#/definitions/DiskCID'

 /delete_disk:
  delete:
    operationId: delete_disk
    summary: Delete Disk
    tags:
      - disk
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/delete_disk.go
    description: |
     Deletes disk. Assume that disk was detached from all VMs. To avoid losing track of disks, make sure to raise an error if disk deletion is not absolutely certain.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: disk_cid
        in: query
        description: |
         Cloud ID of the disk to delete returned from create_disk
        required: true
        type: integer
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty'

 /has_disk:
  get:
    operationId: has_disk
    summary: Has Disk
    tags:
      - disk
    description: |
     Checks for disk presence.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: disk_cid
        in: query
        description: |
         Cloud ID of the disk to delete returned from create_disk
        required: true
        type: integer
    responses:
     default:
      description: returns true if disk is present
      schema:
       $ref: '#/definitions/Exists'

 /attach_disk:
  put:
    operationId: attach_disk
    summary: Attach Disk
    tags:
      - disk
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/attach_disk.go
    description: |
     Attaches disk to the VM.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached;  it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
      - name: disk_cid
        in: query
        description: |
         Cloud ID of the disk to delete returned from create_disk
        required: true
        type: integer
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty'

 /detach_disk:
  put:
    operationId: detach_disk
    summary: Detaches disk from the VM.
    tags:
      - disk
    externalDocs:
      description: Golang example
      url: https://github.com/cppforlife/bosh-warden-cpi/blob/master/action/detach_disk.go  
    description: |
     Attaches disk to the VM.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
      - name: disk_cid
        in: query
        description: |
         Cloud ID of the disk to delete returned from create_disk
        required: true
        type: integer
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty'  

 /get_disks:
  get:
    operationId: get_disks
    summary: Get Disks.
    tags:
      - disk
    description: |
     Returns list of disks currently attached to the VM.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
    responses:
     default:
      description:  Array of disk_cids that are currently attached to the VM
      schema:
        type: array
        items:
          $ref: '#/definitions/DiskCID' 

 /snapshot_disk:
  post:
    operationId: snapshot_disk
    summary: Snapshot Disk.
    tags:
      - snapshot
    description: |
     Snapshots the disk.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: disk_cid  
        in: query
        description: |
         The disk CID
        required: true
        type: string
    responses:
     default:
      description:  Snapshot CID
      schema:
        type: object
        $ref: '#/definitions/SnapshotCID' 

 /delete_snapshot:
  delete:
    operationId: delete_snapshot
    summary: Delete Snapshot.
    tags:
      - snapshot
    description: |
     Deletes a snapshot.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: snapshot_cid  
        in: query
        description: |
         The snapshot CID
        required: true
        type: string
    responses:
     default:
      description: No return value
      schema:
        $ref: '#/definitions/Empty' 

 /current_vm_id:
  get:
    operationId: current_vm_id
    summary: Current VM ID.
    tags:
      - vm
    description: |
     Gets the VM ID.
    responses:
     default:
      description: VM ID
      schema:
        type: object
        $ref: '#/definitions/VMID'

 /ping:
  get:
    operationId: ping
    summary: Ping.
    tags:
      - vm
    description: |
     Pings the VM.
    consumes:
        - application/json
    produces:
        - application/json
    parameters:
      - name: vm_cid  
        in: query
        description: |
         cloud ID of the VM created disk will most likely be attached; it could be used to optimize disk placement so that disk is located near the VM
        required: true
        type: string
    responses:
     default:
      description: Ping data
      schema:
        type: object
        $ref: '#/definitions/PingData'

definitions:
  PropertyItem:
    properties:
      name:
        type: string
        description: The property name.
      value:
        type: string
        description: The property value.
  CreateVM:
    properties:
      cloud_properties:
        type: array
        description: |
         cloud properties hash extracted from the stemcell tarball
        items:
          $ref: '#/definitions/PropertyItem'
      networks:
        type: array
        description: |
          networks hash that specifies which VM networks must be configured (e.g. {'net1': { ... }, 'net2': { ... }}
        items:
          $ref: '#/definitions/NetworkItem'
      disk_cids:
        description: |
          array of disk_cids for each disk that created VM will most likely be attached; they could be used to optimize VM placement so that disks are located nearby
        type: array
        items:
          $ref: '#/definitions/DiskCID'
      environment:
        type: array
        description: |
          resource pool's env hash specified in deployment manifest
        items:
          $ref: '#/definitions/PropertyItem'
  NetworkItem:
    properties:
      name:
        type: string
        description: The nework name.
      value:
        type: object
        description: The network value.
        $ref: '#/definitions/PropertyItem'
  StemcellID:
    type: string
  VMID:
    type: string
  Network:
    type: string
  DiskCID:
    type: string
  SnapshotCID:
    type: string
  Empty:
    type: string
  Exists:
    type: boolean
  PingData:
    type: string