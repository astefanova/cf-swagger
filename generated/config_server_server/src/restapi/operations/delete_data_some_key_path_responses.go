package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"models"
)

/*DeleteDataSomeKeyPathOK OK

swagger:response deleteDataSomeKeyPathOK
*/
type DeleteDataSomeKeyPathOK struct {
}

// NewDeleteDataSomeKeyPathOK creates DeleteDataSomeKeyPathOK with default headers values
func NewDeleteDataSomeKeyPathOK() *DeleteDataSomeKeyPathOK {
	return &DeleteDataSomeKeyPathOK{}
}

// WriteResponse to the client
func (o *DeleteDataSomeKeyPathOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
}

/*DeleteDataSomeKeyPathDefault Unexpected error

swagger:response deleteDataSomeKeyPathDefault
*/
type DeleteDataSomeKeyPathDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteDataSomeKeyPathDefault creates DeleteDataSomeKeyPathDefault with default headers values
func NewDeleteDataSomeKeyPathDefault(code int) *DeleteDataSomeKeyPathDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteDataSomeKeyPathDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete data some key path default response
func (o *DeleteDataSomeKeyPathDefault) WithStatusCode(code int) *DeleteDataSomeKeyPathDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete data some key path default response
func (o *DeleteDataSomeKeyPathDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete data some key path default response
func (o *DeleteDataSomeKeyPathDefault) WithPayload(payload *models.Error) *DeleteDataSomeKeyPathDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete data some key path default response
func (o *DeleteDataSomeKeyPathDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteDataSomeKeyPathDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
