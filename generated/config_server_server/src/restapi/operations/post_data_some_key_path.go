package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// PostDataSomeKeyPathHandlerFunc turns a function with the right signature into a post data some key path handler
type PostDataSomeKeyPathHandlerFunc func(PostDataSomeKeyPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDataSomeKeyPathHandlerFunc) Handle(params PostDataSomeKeyPathParams) middleware.Responder {
	return fn(params)
}

// PostDataSomeKeyPathHandler interface for that can handle valid post data some key path params
type PostDataSomeKeyPathHandler interface {
	Handle(PostDataSomeKeyPathParams) middleware.Responder
}

// NewPostDataSomeKeyPath creates a new http.Handler for the post data some key path operation
func NewPostDataSomeKeyPath(ctx *middleware.Context, handler PostDataSomeKeyPathHandler) *PostDataSomeKeyPath {
	return &PostDataSomeKeyPath{Context: ctx, Handler: handler}
}

/*PostDataSomeKeyPath swagger:route POST /data/someKeyPath postDataSomeKeyPath

creates the config data associated with someKeyPath

whenever Director generates a value it will be saved into the config server

*/
type PostDataSomeKeyPath struct {
	Context *middleware.Context
	Handler PostDataSomeKeyPathHandler
}

func (o *PostDataSomeKeyPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostDataSomeKeyPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
