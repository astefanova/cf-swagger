package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteDataSomeKeyPathHandlerFunc turns a function with the right signature into a delete data some key path handler
type DeleteDataSomeKeyPathHandlerFunc func(DeleteDataSomeKeyPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDataSomeKeyPathHandlerFunc) Handle(params DeleteDataSomeKeyPathParams) middleware.Responder {
	return fn(params)
}

// DeleteDataSomeKeyPathHandler interface for that can handle valid delete data some key path params
type DeleteDataSomeKeyPathHandler interface {
	Handle(DeleteDataSomeKeyPathParams) middleware.Responder
}

// NewDeleteDataSomeKeyPath creates a new http.Handler for the delete data some key path operation
func NewDeleteDataSomeKeyPath(ctx *middleware.Context, handler DeleteDataSomeKeyPathHandler) *DeleteDataSomeKeyPath {
	return &DeleteDataSomeKeyPath{Context: ctx, Handler: handler}
}

/*DeleteDataSomeKeyPath swagger:route DELETE /data/someKeyPath deleteDataSomeKeyPath

deletes the value associated with this path

user can delete config values

*/
type DeleteDataSomeKeyPath struct {
	Context *middleware.Context
	Handler DeleteDataSomeKeyPathHandler
}

func (o *DeleteDataSomeKeyPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteDataSomeKeyPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
