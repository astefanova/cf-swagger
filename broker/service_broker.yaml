swagger: '2.0'
info:
  version: "2.5"
  title: Service Broker API
  description: |
   The Cloud Foundry services API defines the contract between the Cloud Controller and the service broker. The broker is expected to implement several HTTP (or HTTPS) endpoints underneath a URI prefix. One or more services can be provided by a single broker, and load balancing enables horizontal scalability of redundant brokers. Multiple Cloud Foundry instances can be supported by a single broker using different URL prefixes and credentials. [Learn more about the Service Broker API.](http://swagger.wordnik.com)
host: localhost
basePath: /v2
schemes:
  - http
paths:
 /catalog:
  get:
    operationId: catalog
    summary: Gets services registered within the broker
    tags:
      - catalog
    description: |
     The first endpoint that a broker must implement is the service catalog. Cloud Controller will initially fetch this endpoint from all brokers and make adjustments to the user-facing service catalog stored in the Cloud Controller database. 
    produces:
        - application/json
    responses:
      "200":
        description: successful operation
        schema:
          type: array
          items:
            $ref: "#/definitions/Services"
      "400":
        description: Invalid status value

 /service_instance/{instance_id}:
  parameters:
   - $ref: "#/parameters/instance_id"
  put:
   operationId: create_service_instance
   produces:
    - application/json
   consumes:
    - application/json
   tags:
    - service_instance
   description: When the broker receives a provision request from Cloud Controller, it should synchronously take whatever action is necessary to create a new service resource for the developer. The result of provisioning varies by service type, although there are a few common actions that work for many services.
   summary: Provisions a service instance
   parameters:
    - name: service
      required: true
      description: Service information.
      in: body
      schema:
       type: object
       $ref: "#/definitions/Service"

   responses:
      "201":
       description: Service instance has been created. The expected response body is below.
       schema:
        type: object
        $ref: "#/definitions/Dashbord_url"
      "200":
       description: May be returned if the service instance already exists and the requested parameters are identical to the existing service instance. The expected response body is below.
       schema:
        type: object
        $ref: "#/definitions/Dashbord_url"
      "409":
       description: Should be returned if the requested service instance already exists. The expected response body is “{}”
       schema:
        type: object
        $ref: "#/definitions/Empty"

  patch:
   operationId: update_service_instance
   summary: Updating a Service Instance
   description: Brokers that implement this endpoint can enable users to modify attributes of an existing service instance. The first attribute Cloud Foundry supports users modifying is the service plan. This effectively enables users to upgrade or downgrade their service instance to other plans. To see how users make these requests, [see Managing Services](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service).
   consumes:
    - application/json
   produces:
    - application/json
   tags:
    - service_instance
   parameters:
    - name: plan
      description: New Plan information.
      required: true
      in: body
      schema:
       type: object
       $ref: "#/definitions/ServicePlan"
   responses:
     "200":
      description: New plan is effective. The expected response body is {}.
      schema:
        type: object
        $ref: "#/definitions/Empty"
     "422":
      description: May be returned if the particular plan change requested is not supported or if the request can not currently be fulfilled due to the state of the instance (eg. instance utilization is over the quota of the requested plan). Broker should include a user-facing message in the body; for details [see Broker Errors](https://docs.cloudfoundry.org/services/api.html#broker-errors).
      schema:
        type: object

  delete:
   operationId: deprovision_service_instance
   summary: Deprovisions a service instance.
   description: When a broker receives a deprovision request from Cloud Controller, it should delete any resources it created during the provision. Usually this means that all resources are immediately reclaimed for future provisions.
   produces:
    - application/json
   tags:
    - service_instance
   parameters:
    - name: service_id
      required: true
      in: query
      type: string
      description: ID of the service from the catalog. While not strictly necessary, some brokers might make use of this ID.
    - name: plan_id
      required: true
      in: query
      type: string
      description: ID of the plan from the catalog. While not strictly necessary, some brokers might make use of this ID.
   responses:
    "200":
     description: Service instance was deleted. The expected response body is {}.
     schema:
      type: object
      $ref: "#/definitions/Empty"
    "410":
     description: Should be returned if the binding does not exist. The expected response body is {}.
     schema:
       type: object
       $ref: "#/definitions/Empty"

 /service_instances/{instance_id}/service_bindings/{binding_id}:
  parameters:
   - $ref: "#/parameters/instance_id"
   - $ref: "#/parameters/binding_id"

  put:
    operationId: service_binding
    summary: Binds to a service
    description: When the broker receives a bind request from the Cloud Controller, it should return information which helps an application to utilize the provisioned resource. This information is generically referred to as credentials. Applications should be issued unique credentials whenever possible, so one application’s access can be revoked without affecting other bound applications. For more information on credentials, [see Binding Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).
    produces:
     - application/json
    consumes:
     - application/json
    tags:
     - service_instance
    parameters:
     - name: binding
       required: true
       in: body
       schema:
        type: object
        $ref: "#/definitions/Binding"
    responses:
      "201":
       description: Binding has been created.
       schema:
        type: object
        $ref: "#/definitions/BindingResponse"
      "200":
       description: May be returned if the binding already exists and the requested parameters are identical to the existing binding.
       schema:
        type: object
        $ref: "#/definitions/BindingResponse"
      "409":
       description: Should be returned if the requested binding already exists. The expected response body is {}, though the description field can be used to return a user-facing error message, as described in Broker Errors.
       schema:
        type: object
        $ref: "#/definitions/Empty"

  delete:
    operationId: service_unbind
    summary: Unbinds a service
    description: When a broker receives an unbind request from Cloud Controller, it should delete any resources it created in bind. Usually this means that an application immediately cannot access the resource.
    produces:
      - application/json
    tags:
     - service_instance
    parameters:
     - name: service_id
       required: true
       in: query
       type: string
       description: ID of the service from the catalog. While not strictly necessary, some brokers might make use of this ID.
     - name: plan_id
       required: true
       in: query
       type: string
       description: ID of the plan from the catalog. While not strictly necessary, some brokers might make use of this ID.
    responses:
     "200":
      description: Binding was deleted. The expected response body is {}.
      schema:
       type: object
       $ref: "#/definitions/Empty"
     "410":
      description: Should be returned if the binding does not exist. The expected response body is {}.
      schema:
        type: object
        $ref: "#/definitions/Empty"

 /service_keys:
  post:
   operationId: create_service_key
   summary: Creates a service key
   description: Creating a new Service Key means calling an HTTP POST operation on the new /service_keys endpoint using an already created service instance. 
   consumes:
    - application/json
   produces:
    - application/json
   tags:
    - service_keys
   parameters:
     - name: service_key
       required: true
       in: body
       schema:
        type: object
        $ref: "#/definitions/ServiceKey"

   responses:
     "201":
      description: Service  key is created.
      schema:
       type: object
       $ref: "#/definitions/ServiceKeyEntity"
     "410":
      description: Should be returned if the service does not exist. The expected response body is {}.
      schema:
       type: object
       $ref: "#/definitions/Empty"

  get:
   operationId: list_service_keys
   summary: Gets the list of service keys.
   description: As a developer or admin user, Service Keys can be retrieved by HTTP GET operation on the /service_keys endpoint without any parameter. But Space Manager and Auditor user can't retrieve the Service Keys which means 0 results will be returned.
   tags:
    - service_keys
   responses:
    "200":
     description: ok
     schema:
      type: object
      $ref: "#/definitions/Keys"

 /service_keys/{key_id}:
  parameters:
   - $ref: "#/parameters/key_id"
  get:
   operationId: retirieve_service_key
   summary: Retrieivesd a service key.
   description: Retrieving a Service Key can be done through an HTTP GET operation on the /service_keys endpoint by using an service key GUID or on the /service_instances endpoint with the service instance's GUID and service key name.
   produces:
    - application/json
   tags:
    - service_keys

   responses:
     "200":
      description: Description of the service key.
      schema:
       type: object
       $ref: "#/definitions/ServiceKeyEntity"

     "404":
      description: The service key does not exist.
      schema: 
       type: object
       $ref: "#/definitions/Empty"

  delete:
   operationId: delete_service_key
   summary: Deletes a service key
   description: A Service Key can be deleted by using HTTP DELETE opeartion on /service_keys endpoint. Currently Space Manager and Auditor are not authorized to perform delete operation. Only Admin and Space Developer have this permission.
   tags:
    - service_keys
   responses:
    "204":
     description: The delete operation succeeded.

parameters:
  instance_id:
    name: instance_id
    description: The instance_id of a service instance is provided by the Cloud Controller. This ID will be used for future requests (bind and deprovision), so the broker must use it to correlate the resource it creates.
    type: string
    in: path
    required: true

  binding_id:
    name: binding_id
    description: The binding_id of a service binding is provided by the Cloud Controller. 
    type: string
    in: path
    required: true

  key_id:
    name: key_id
    description: The ID of a service key. 
    type: string
    in: path
    required: true

definitions:
  Services:
    description: Schema of a service object
    properties:
      id:
        type: string
        description: |
         An identifier used to correlate this service in future requests to the catalog. This must be unique within Cloud Foundry, using a GUID is recommended.
      name:
       type: string
       description: The CLI-friendly name of the service that will appear in the catalog. All lowercase, no spaces.
      description:
       type: string
       description: A short description of the service that will appear in the catalog.
      bindable:
       type: boolean
       description: Whether the service can be bound to applications.
      tags:
       type: array
       description: |
        Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service, enabling equivalent services to be swapped out without changes to dependent logic in applications, buildpacks, or other services. E.g. mysql, relational, redis, key-value, caching, messaging, amqp.
       items:
         type: string
      metadata:
       type: string
       description: A list of metadata for a service offering. For more information, see [Service Metadata](https://docs.cloudfoundry.org/services/catalog-metadata.html).
      requires:
       type: array
       description: A list of permissions that the user would have to give the service, if they provision it. The only permission currently supported is syslog_drain; for more info [see Application Log Streaming](https://docs.cloudfoundry.org/services/app-log-streaming.html).
       items:
        type: string
      plan_updateable:
       type: boolean
       description: Whether the service supports upgrade/downgrade for some plans. Please note that the misspelling of the attribute plan_updatable to plan_updateable was done by mistake. We have opted to keep that misspelling instead of fixing it and thus breaking backward compatibility.
      plans:
        type: array
        description: A list of plans for this service
        items:
         $ref: '#/definitions/Plan'
      dashboard_client:
        type: object
        description: Contains the data necessary to activate the [Dashboard SSO feature](https://docs.cloudfoundry.org/services/dashboard-sso.html) for this service
        $ref: '#/definitions/Dashbordclient'

  Plan:
   description: A plan for the service
   properties:
    id: 
     type: string
     description: An identifier used to correlate this plan in future requests to the catalog. This must be unique within Cloud Foundry, using a GUID is recommended.
    name:
     type: string
     description: The CLI-friendly name of the plan that will appear in the catalog. All lowercase, no spaces.
    description:
     type: string
     description: A short description of the service that will appear in the catalog.
    metadata:
     type: object
     description: A list of metadata for a service plan. For more information, [see Service Metadata](https://docs.cloudfoundry.org/services/catalog-metadata.html).
    free:
     type: boolean
     description: This field allows the plan to be limited by the non_basic_services_allowed field in a Cloud Foundry Quota, [see Quota Plans](http://docs.cloudfoundry.org/running/managing-cf/quota-plans.html). 

  Dashbordclient:
   description: Contains the data necessary to activate the [Dashboard SSO feature](https://docs.cloudfoundry.org/services/dashboard-sso.html) for this service
   properties:
    id:
     type: string
     description: The id of the Oauth2 client that the service intends to use. The name may be taken, in which case the API will return an error to the operator
    secret:
     type: string
     description: A secret for the dashboard client
    redirect_uri:
     type: string
     description: A domain for the service dashboard that will be whitelisted by the UAA to enable SSO

  Service:
   description: Service object
   properties:
    service_id:
     type: string
     description: The ID of the service within the catalog above. While not strictly necessary, some brokers might make use of this ID.
    plan_id:
     type: string
     description: The ID of the plan within the above service (from the catalog endpoint) that the user would like provisioned. Because plans have identifiers unique to a broker, this is enough information to determine what to provision.
    organization_guid:
     type: string
     description: The Cloud Controller GUID of the organization under which the service is to be provisioned. Although most brokers will not use this field, it could be helpful in determining data placement or applying custom business rules.
    space_guid:
     type: string
     description: Similar to organization_guid, but for the space.
    parameteres:
     type: array
     items:
      $ref: "#/definitions/Parameter"
     description: Cloud Foundry API clients can provide a JSON object of configuration parameters with their request and this value will be passed through to the service broker. Brokers are responsible for validation.

  Dashbord_url:
   description: The URL of a web-based management user interface for the service instance; we refer to this as a service dashboard. The URL should contain enough information for the dashboard to identify the resource being accessed (“9189kdfsk0vfnku” in the example below). For information on how users can authenticate with service dashboards via SSO, [see Dashboard Single Sign-On](https://docs.cloudfoundry.org/services/dashboard-sso.html).
   properties:
    dashboard_url:
     type: string
     description: The URL of a web-based management user interface for the service instance; we refer to this as a service dashboard. The URL should contain enough information for the dashboard to identify the resource being accessed (“9189kdfsk0vfnku” in the example below). For information on how users can authenticate with service dashboards via SSO, [see Dashboard Single Sign-On](https://docs.cloudfoundry.org/services/dashboard-sso.html). 

  Empty:
   type: string
   description: Expected empty response could be {}

  ServicePlan:
   description: New Plan to be added to a service.
   properties:
    plan_id:
     type: string
     description: ID of the new plan from the catalog.
    parameters:
     type: array
     items:
      $ref: "#/definitions/Parameter"
     description: Cloud Foundry API clients can provide a JSON object of configuration parameters with their request and this value will be passed through to the service broker. Brokers are responsible for validation.
    previous_values:
     type: object
     description: Information about the instance prior to the update.
     $ref: '#/definitions/PreviousValues'

  PreviousValues:
   description: Information about the instance prior to the update.
   properties:
    plan_id:
     type: string
     description: ID of the plan prior to the update.
    service_id:
     type: string
     description: ID of the service for the instance.
    organization_id:
     type: string
     description: ID of the organization containing the instance.
    space_id:
     type: string
     description: ID of the space containing the instance.

  Parameter:
   description: A key value parameters
   properties:
    name:
     type: string
     description: Name of the parameter
    value:
     type: object
     description: value of the parameter

  Binding:
   description: Information to bind the service to an application.
   properties:
    app_guid:
     type: string
     description: GUID of the application that you want to bind your service to. Will be included when users bind applications to service instances.
    plan_id:
     type: string
     description: ID of the plan from the catalog. While not strictly necessary, some brokers might make use of this ID.
    service_id:
     type: string
     description: ID of the service from the catalog. While not strictly necessary, some brokers might make use of this ID.
    parameters:
     type: array
     items:
      $ref: "#/definitions/Parameter"
     description: Cloud Foundry API clients can provide a JSON object of configuration parameters with their request and this value will be passed through to the service broker. Brokers are responsible for validation.

  BindingResponse:
   description: Success binding response.
   properties:
    credentials:
     type: object
     description: A free-form hash of credentials that the bound application can use to access the service. For more information, [see Binding Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).
    syslog_drain_url:
     type: string
     description: A URL to which Cloud Foundry should drain logs for the bound application. requires syslog_drain must be declared in the catalog endpoint or Cloud Foundry will consider the response invalid. For details, [see Application Log Streaming](https://docs.cloudfoundry.org/services/app-log-streaming.html).

  ServiceKey:
   description: Parameters needed to identify the service for which we need to get the keys.
   properties: 
    service_instance_guid:
     type: string
     description: The guid of the service instance for which to create service key
    name:
     type: string
     description: the name of the service key.
    parameters:
     type: array
     items:
      $ref: "#/definitions/Parameter"
     description: Arbitrary parameters to pass along to the service broker. Must be a JSON object.

  ServiceKeyEntity:
   description: Assuming the current user agent is properly authenticated and the service instance GUID is valid then the result can be a new Service Key.
   properties:
    metadata:
      type: object
      $ref: "#/definitions/Metadata"
      description: Metadata related to the service key
    entity:
     type: object
     $ref: "#/definitions/Entity"
     description: Service Key entity
    service_instance_url:
     type: string
     description: URL of the service instance.

  Metadata:
   description: metadata related to the service key
   properties:
    guid:
     type: string
     description: guid of the created service key.
    url:
     type: string
     description:  URL of the creatd service Key.
    created_at:
     type: string
     description:  Timestamp of the creation of the key.
    updated_at:
     type: string
     description:  Timestamp of the last update of the key.

  Entity:
   description: Entity conatining the data of the service key
   properties:
    name:
     type: string
     description: Name of the service key.
    service_instance_guid:
     type: string
     description:  guid of the service instance of the created key.
    credentials:
     type: object
     description:  Credentials.

  Keys:
   description: keys
   properties:
    total_results:
     type: integer
     description: number of total results
    total_pages:
     type: integer
     description: number of total pages
    prev_url:
     type: string
     description: url of the previous page.
    next_url:
     type: string
     description: url of the next page.
    resources:
     description: List of service keys.
     type: array
     items:
      $ref: "#/definitions/ServiceKeyEntity"